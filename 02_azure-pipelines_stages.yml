#ABdur pipleline with staggging and Task
trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: build
  jobs: 
  - job: job1
    steps:
    - bash: echo job1 build
    
    # Archive files
# Compress files into .7z, .tar.gz, or .zip
    - task: ArchiveFiles@1
      inputs:
       SourceFolder: $(System.DefaultWorkingDirectory)
       rootFolder: true 
       archiveType: default
       #tarCompression: 'gz' # Optional. Options: gz, bz2, xz, none
       archiveFile: '$(System.DefaultWorkingDirectory)/$(Build.BuildId).zip' 
       replaceExistingArchive: true 
        #verbose: # Optional
        #quiet: # Optional
    - task: CopyFiles@2
      inputs:
         SourceFolder: '$(System.DefaultWorkingDirectory)'
         Contents: |
            **/*.zip
         TargetFolder: '$(Build.ArtifactStaggingDirectory)'
    - bash: ls $(Build.ArtifactStaggingDirectory)
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

# - stage: devDeploy
#   dependsOn: build
#   variables: 
#    envorinment: dev
#   jobs: 
#   - job: devDeployjob1
#     steps:
#     - bash: echo devDeployjob1 env $(envorinment) build
#     - bash: echo ....... $(env_var)
# - stage: QADeploy
#   variables: 
#    envorinment: QA
#   dependsOn: build
#   jobs: 
#   - job: QADeployjob1
#     steps:
#     - bash: echo QADeployjob1 env $(envorinment) build
# - stage: ProdDeploy
#   variables: 
#    envorinment: Prod
#   dependsOn: QADeploy
#   jobs: 
#   - job: ProdDeployjob1
#     steps:
#     - bash: echo ProdDeployjob1 env $(envorinment)build



